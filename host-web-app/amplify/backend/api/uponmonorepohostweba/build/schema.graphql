type Host {
  id: ID!
  username: String!
  email: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelHostConnection {
  items: [Host]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelHostFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  email: ModelStringInput
  and: [ModelHostFilterInput]
  or: [ModelHostFilterInput]
  not: ModelHostFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getHost(id: ID!): Host
  listHosts(filter: ModelHostFilterInput, limit: Int, nextToken: String): ModelHostConnection
}

input CreateHostInput {
  id: ID
  username: String!
  email: String!
}

input UpdateHostInput {
  id: ID!
  username: String
  email: String
}

input DeleteHostInput {
  id: ID
}

type Mutation {
  createHost(input: CreateHostInput!, condition: ModelHostConditionInput): Host
  updateHost(input: UpdateHostInput!, condition: ModelHostConditionInput): Host
  deleteHost(input: DeleteHostInput!, condition: ModelHostConditionInput): Host
}

input ModelHostConditionInput {
  email: ModelStringInput
  and: [ModelHostConditionInput]
  or: [ModelHostConditionInput]
  not: ModelHostConditionInput
}

type Subscription {
  onCreateHost(username: String): Host @aws_subscribe(mutations: ["createHost"])
  onUpdateHost(username: String): Host @aws_subscribe(mutations: ["updateHost"])
  onDeleteHost(username: String): Host @aws_subscribe(mutations: ["deleteHost"])
}
